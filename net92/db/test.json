{"messages": [{"role": "system", "content": "You are a Solidity smart contract auditor. Given code with line numbers, return an audit report in JSON format."}, {"role": "user", "content": "function _allocatePerformanceFee(uint256 _performanceFee, address _performanceFeeReceiver, uint256 _performanceFeeDebt, WrappedPiErc20Interface _piToken, IERC20 _underlying, uint256 _totalReward) internal returns (uint256 performance, uint256 remainder, uint256 resultPerformanceFeeDebt) {\n    performance = 0;\n    remainder = 0;\n    resultPerformanceFeeDebt = _performanceFeeDebt;\n    if (_performanceFee > 0) {\n        performance = _totalReward.mul(_performanceFee).div(HUNDRED_PCT);\n        remainder = _totalReward.sub(performance);\n        uint256 performanceFeeDebtBefore = _performanceFeeDebt;\n        uint256 underlyingBalance = _underlying.balanceOf(address(_piToken));\n        uint256 totalFeeToPayOut = performance.add(performanceFeeDebtBefore);\n        if (underlyingBalance >= totalFeeToPayOut) {\n            _safeTransfer(_piToken, _underlying, _performanceFeeReceiver, totalFeeToPayOut);\n        } else {\n            uint256 diff = totalFeeToPayOut.sub(underlyingBalance);\n            resultPerformanceFeeDebt = totalFeeToPayOut.sub(diff);\n            _safeTransfer(_piToken, _underlying, _performanceFeeReceiver, underlyingBalance);\n        }\n        emit DistributePerformanceFee(performanceFeeDebtBefore, resultPerformanceFeeDebt, underlyingBalance, performance);\n    } else {\n        remainder = _totalReward;\n    }\n}"}, {"role": "assistant", "content": "[{\"fromLine\": 1, \"toLine\": 22, \"vulnerabilityClass\": \"Front-running potential\", \"description\": \"This code contains Front-running potential vulnerability.\"}]"}]}
